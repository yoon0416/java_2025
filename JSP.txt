■1. WEB
1. WEB
- TCP/IP 기반으로 연결되어 있는 컴퓨터네트워크 
- 클라이언트 ↔ 서버
- 1)  Web    프로그래밍 (Http 통신)   단방향통신 
     ( Client요청시 Server응답 후종료)
- 2)  Socket 프로그래밍 (채팅)           양방향통신 
     ( 특정port를 통해 실시간으로 정보를 주고 받음 - 계속연결되어 있음)

2. WS  VS  WAS
- WS (Web  Server)  : 정적콘텐츠 (html,css, js) 웹브라우저에제공
   예) Apache
- WAS (Web Application Server) : 동적콘텐츠 
   브라우저와 dbms사이에 동작하는 미들웨어 
   예)  Apache + tomcat

3. Tomcat
>> Http request( 요청) > Catalina(해결사) > Context > Servlet > response

3-1) http request(요청)
3-2) Coyte 가  해결사찾기: http요청을 처리할 웹어플리케이션(context) 
                                   web.xml 파일내용을 참고해서 요청전달.
3-3) Catalina (Servlet) : 해결사	
3-4) Jasper (Jsp Engine) :  java+html 페이지 요청처리 응답(response)


D:\java_2025\tomcat9.0\apache-tomcat-9.0.95\work\Catalina\localhost\jsp_basic\org\apache\jsp



■2. JSP
1.  JSP 기본요소
- HTML + JAVA

1) 스크립트립 : <%        %>   자바코드
2) 지시자       : <%@     %>   
3) 주석          : <%--   --%>
4) 표현          : <%=      %> 출력
5) 선언          : <%!       %> 선언

2. FORM
: 서버쪽으로 정보전달
  action="요청처리"          
  method="요청처리방식"  (get , post )
  name ="데이터보관이름"

3. 쿼리스트링
https://www.google.com/search?q=apple&name=sally

- url 뒤에 [입력데이터]를 함께 제공하는 데이터 전달방법
- get방식

- 클라이언트[#] ↔ 서버

4. request.getParameter("name값")
- 클라이언트 ↔ 서버[#]
- request.getParameter("q")





■3. 내장객체 
1. request ( 요청 )
 - request.getParameter("name); 값 한개
 - request.getParameterValues("name"); 값 여러개 - checkbox

2. response ( 응답 )
 - response.sendRedirect("처리경로");	   
   * response/request가 유지가 안됨.
   * 같은 처리 alert 출력 안됨.
  ※ location.href / meta http-equiv='refresh' content='초; url=경로' 
 
 - request.getRequestDispatcher("경로").forward( request, response );
   * 요청과 응답 위임
   * response/request가 유지가 됨.

3. scope 범위
  [ application(애플리케이션) > session(브라우저) > request(요청) > pageContext(페이지) ]

4. session
 - http 프로토콜 ( 데이터요청 - 응답을 받게 되면 바로 종료)
 - 서버측에 저장되는 정보
 - 보안

5. cookie
 - 클라이언트 측에 저장되는 정보
 - 보안상에 취약


6. error
 - 4xx (클라이언트 오류) 5xx (서버측에 오류)
 - 404 페이지 찾을 수 없음, 405 메서드 요청 잘못함, 500 자바코드상에 오류
 - web.xml 에러설정

7.out
 - 출력


■4. mvc1 vs mvc2
1. MVC
 - 서로 영향없이 쉽게 고칠 수 있는 애플리케이션


 - M : 애플리케이션의 정보 (db 정보, dto, dao, 비지닉스 login 포함)
 - V  : view 사용자가 사용하는 화면
 - C  : controller model과 view사이의 상호작용 관리

2. mvc1 vs mvc2
 - mvc1 - controller 역할을 jsp가 담당
 - mvc2 - controller 역할을 servlet이 담당


■5. dbcp
1. dbcp
  - 분산응용프로그램
  
2. 실습

1) 다운로드 https://commons.apache.org/downloads/index.html
2) [WEB-INF] - lib - JAR
3) DBCP - JAVA 파일 만들기
https://tomcat.apache.org/

■server.xml
<Context>
  <Resource name="jdbc/mbasic" auth="Container" 
               type="javax.sql.DataSource"
               maxTotal="100" maxIdle="30" maxWaitMillis="10000"
               username="root" password="1234" driverClassName="com.mysql.cj.jdbc.Driver"
               url="jdbc:mysql://localhost:3306/mbasic"/>
</Context>

■web.xml
  <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/mbasic</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>

■DBCP연동
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
Connection conn = ds.getConnection();


>> 











/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-03-21 09:06:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.InetAddress;
import java.sql.*;

public final class milk_005finsert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.net.InetAddress");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" <!-- 사용자의 IP 주소를 가져오기 위해 InetAddress 클래스 import -->\r\n");
      out.write(" <!-- JDBC 관련 클래스들 (Connection, Statement, ResultSet 등) import -->\r\n");
      out.write(" <!-- 페이지 인코딩 설정 -->\r\n");
      out.write("\r\n");

    // 1. UTF-8 설정
    request.setCharacterEncoding("UTF-8"); // 한글 깨짐 방지를 위해 요청 데이터 인코딩을 UTF-8로 설정

    // 2. request.getParameter()를 이용해 데이터 받기
    String oname = request.getParameter("oname"); // 폼에서 입력받은 우유 이름 가져오기
    int onum = Integer.parseInt(request.getParameter("onum")); // 폼에서 입력받은 우유 갯수를 문자열에서 정수로 변환
    String oip = InetAddress.getLocalHost().getHostAddress(); // 주문자의 IP 주소를 가져옴 (자신의 컴퓨터 주소)

    // DB 접속 정보
    String url = "jdbc:mysql://localhost:3306/milk_order"; // DB 주소(localhost의 milk_order 데이터베이스)
    String id = "root";  // DB 접속용 사용자 ID
    String pass = "1234"; // DB 접속용 비밀번호

    Connection conn = null; // DB와 연결하기 위한 통로 (Connection 타입)
    PreparedStatement pstmt = null; // ?를 사용할 수 있는 SQL 실행 도구 (보안과 성능 좋음)
    Statement stmt = null; // 일반 SQL을 실행할 수 있는 기본 SQL 실행 도구
    ResultSet rs = null; // SELECT 결과를 담을 그릇 (표 형태의 데이터 저장)

    try {
        // 3. JDBC 드라이버 로딩
        Class.forName("com.mysql.cj.jdbc.Driver"); // MySQL 드라이버 로딩 (DB랑 자바가 소통할 수 있게 함)

        // 4. DB 연동
        conn = DriverManager.getConnection(url, id, pass); // 입력된 정보로 DB와 연결된 통로 생성 (전화선 연결 느낌)

        // 5. 데이터 삽입을 위한 SQL (INSERT)
        String sql = "insert into milk_order (oname, onum, oip) values (?, ?, ?)"; // 데이터 삽입용 SQL 문 (?는 나중에 값으로 대체됨)

        // 6. PreparedStatement 준비
        pstmt = conn.prepareStatement(sql); 	// 위의 sql문을 실행할 준비 (주문서 양식 만들어 놓기)
        pstmt.setString(1, oname); 				// 첫 번째 ?에 oname 변수값 설정 (주문할 우유 이름)
        pstmt.setInt(2, onum); 					// 두 번째 ?에 onum 변수값 설정 (주문할 갯수)
        pstmt.setString(3, oip); 				// 세 번째 ?에 oip 변수값 설정 (주문자의 IP)
        		//아직까진 pstmt에 임시저장 db에 안넘겨줌

        // 7. SQL 실행
        int result = pstmt.executeUpdate(); 	// INSERT문 실행 → 영향을 받은 행 수를 result에 저장 (삽입 성공 여부 확인용) db에 값넘기는 작업
												//값을 넣거나(INSERT), 바꾸거나(UPDATE), 삭제할 때(DELETE)는 executeUpdate()를 사용
        if (result > 0) { // 삽입 성공 시   여기 수정해야함 사용자들이 동시에 하면 주문번호가 본인게 안나올 수 있음
            // 8. 마지막으로 삽입된 주문번호(ono)를 조회
            stmt = conn.createStatement(); // db에 연결한 통로 conn에 sql을 실행할 도구를 생성할꺼다 그걸 stmt에 담을거고
            rs = stmt.executeQuery("select last_insert_id()");  // rs에 셀렉트 라스트 인설트 아이디라는 함수 실행을 넣을꺼다 (방금 삽입된 행의 id값을 가져옴)
            rs.next();// rs행에 값이 있다면 (결과 행이 존재하면)
            int ono = rs.getInt(1); // ono에 정수로 첫 번째 컬럼을 넣겠다 (주문번호를 정수로 꺼냄)

                // 9. 결과 처리:
                out.println("<script>alert('주문성공! 주문번호는 " + ono + "번입니다!'); location.href='milk.jsp';</script>"); // 주문 성공 메시지와 함께 주문번호를 알림창으로 띄움
            
        } else {
            out.println("<script>alert('관리자에게 문의 바람'); location.href='milk.jsp';</script>"); // 삽입 실패 시 알림창 표시
        }

    } catch (Exception e) {
        e.printStackTrace(); // 예외(에러) 내용을 콘솔에 출력
        out.println("에러 발생: " + e.getMessage()); // 브라우저에 에러 메시지 출력
    } finally {
        // 10. 자원 정리
        try {
            if (rs != null) rs.close(); // 결과셋 닫기 (사용하던 표 그릇 정리)
            if (stmt != null) stmt.close(); // 일반 SQL 도구 정리
            if (pstmt != null) pstmt.close(); // PreparedStatement 도구 정리
            if (conn != null) conn.close(); // DB 연결 끊기 (전화선 정리)
        } catch (SQLException e) {
            e.printStackTrace(); // 자원 정리 도중 에러 발생 시 출력
        }
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

1. SPRING?


-------------------------------------------------------
#1. SPRING?
-------------------------------------------------------
▶Step0. jsp
1. mvc1 - jsp ( controller ) 역할
2. mvc2 - servlet (controller) 역할
3. frontcontroller

▶Step1. framework
1. framework [ 디자인패턴 + 라이브러리 = 프레임워크 ]
2. 소프트웨어 개발의 뼈대 역할

▶Step2. ioc + di
1. ioc
- inversion of control
- 제어의 역전
- 인스턴스의 생성~소멸까지 생명주기를 개발자가 아니라 컨테이너가 하는 것
- pojo ( plain old java object )

  class A{}
  A a1 = new A()

  생성 → 초기화 → 서비스 → 소멸
   ↑                                   ↓
    --------------------------------
   
    ioc가 아닌경우 - [ 개발자★ → ( Class A )
		                 → ( Class B )
			      → ( Class C )      ] 컨테이너

    ioc인 경우 - [ 개발자 ← ( Class A )
		           ← ( Class B )
			← ( Class C )★    ]컨테이너


2. di ( dependency injection : 의존성주입 )
- 각 클래스간의 의존관계를 [설정파일]을 통해 [컨테이너]가 자동으로 연결
  장점 : 코드 단순화 / 결합도 제거




▶Step3. 실습
==================================
실습(1) 설치
==================================
* 버전다운그레이드
0. java.sun.com - java11
	C:\Program Files\Java\jdk-11
java_home 11로바꾸기
path javahome 맨위로

1. 스프링 3버전 다운로드
2. 다운로드 경로
https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3
3. 압축 - 경로짧게 / 공백, 한글, 특수기호(-) 경로에 있으면 빼기

==================================
실습(2) spring setting
==================================

    1. dynamic web project - spring000
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path
    5. build path - add Libraries - JUnit 4

    구조확인
	1. pom.xml            설치 다운로드
	2. src/main/java      실제 자바파일 위치
	3. src/test/java        실제 테스트파일 위치
	4. src/main/webapp  jsp파일 위치

연습문제) spring001_di 프로젝트 만들기


==================================
실습(3) spring mvc
==================================
1. 검색: spring
2. legacy project
3. mvc project

※플러그인
 \.metadata\.plugins\org.springsource.ide.eclipse.commons.content.core

※import 해서 완성된 파일 가져오기

==================================
실습(4) spring 정리
==================================
1. 프레임워크
  - 소프트웨어 개발의 뼈대 역할 [ 디자인패턴 + 라이브러리 ]
2. IOC
   - 인스턴스 생성부터 소멸까지 생명주기를 스프링이 관리
3. DI
  - 각 클래스의 의존관계를 [설정파일]을 통해서 컨테이너가 자동으로 연결 
4. BEAN
  - 스프링이 관리하는 객체
  - beanFactory ← ApplicationContext


==================================
실습(4) spring di 연습
==================================
    1. dynamic web project - spring000
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path
    5. build path - add Libraries - JUnit 4
    6. update maven까지!

--
6. pom.xml 세팅

--
7. 구성확인
    [AnimalFarm]  (사용)→    [<<interface>>Animal]   
   ↑(삽입)        ↑(구현)       ↑ (구현)   
    [beans.xml ]  (생성)→     [Cat     /   Dog]

    >> di? 각클래스의 의존관계를 [설정파일]을통해서 컨테이너가 자동연결

  1) 인터페이스
     com.company.ioctest  
   interface Animal
   ----------------------------------
   public interface Animal {
      public String eat();
      public String sleep();
      public String poo();
   }
   ----------------------------------

   2) 구현클래스  
      com.company.ioctest  
      Cat 
      Dog  
   
   package com.company.ioc;
   public class Cat  implements Animal{
      @Override public String eat() { return "Cat-eat"; }
      @Override public String sleep() { return "Cat-sleep"; }
      @Override public String poo() { return "Cat-poo"; }
   } 


   3) 사용클래스 - AnimalFarm 
   package com.company.ioc;

   public class AnimalFarm {
      private String name;
      private Animal ani;
   
      public AnimalFarm() { super(); }
      public String getName() { return name; }
      public void setName(String name) { this.name = name; }
      public Animal getani() { return ani; }
      public void setani(Animal ani) { this.ani = ani; }
   
      public String aniSleep() { return name + ">" + ani.sleep(); }
      public String aniEat()   { return name + ">" + ani.eat(); }
      public String aniPoo()   { return name + ">" + ani.poo(); }
   
      public void print() { 
         System.out.println(  aniSleep()); 
         System.out.println(  aniEat()); 
         System.out.println(  aniPoo()); 
      }

   }





QUESTION1)  DI -   property 를 이용하여 셋팅하고 JUnit Test를 하시오
--1-1 com.company.test1  [ AnimalFarm ]
public class AnimalFarm1 {
   private String name;
   private Animal1 ani;  
}

--1-2 com.company.config   [ test1.xml] 
public void test1() {
   AnimalFarm1 farm = (AnimalFarm1) context.getBean("animalFarm1"); 
   farm.print();
}



QUESTION2)  DI -   constructor 를 이용하여 셋팅하고 JUnit Test를 하시오
--2-1 com.company.test2  [ AnimalFarm ]
public class AnimalFarm2 {
   private String name;
   private Animal ani;  
   public AnimalFarm2 (  String name, Animal ani ){  this.name=name;  this.ani = ani ;}
}

--2-2 com.company.config  [test2.xml]


 


>>DI? 각 클래스의 의존관계를 [설정파일]을 통해서 컨테이너가 자동연결


==================================
#3. Bean
==================================
1. bean spring이 관리하는 객체
2. xml vs Annotation
   - xml [운영]
   - 모든 bean을 명시적으로 xml에 등록
   - 여러 개발자가 같은 설정파일을 공유해서 개발하면 수정시 충돌이 일어날 경우가 많음.

  2-2. Annotation (Bean Scanning) [개발]
  - Bean @을 붙여서 자동인식
  - 개발속도 향상
  - Bean 간의 의존관계를 파악하기 힘듦

▶2. @Component
1. @Component 일반적인 컴포넌트
2. @Component 구체화된 형식 @Controller(웹요청 받아서 응답), @Service(비즈니스로직), @Repository(db연동)

<context:component-scan base-package="경로"/>


==================================
#4. DB / MYBATIS
==================================
▶ DataSource
SimpleDriverDataSource 가장 단순한 버전
- getConnection() 매번생성

> mysql-connector-java / spring-jdbc
<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.28</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>4.3.20.RELEASE</version>
</dependency>

▶2. Mybatis 
1. sql을 별도로 파일분리해서 관리
2. ORM ( object relational mapping ) 프레임워크
3. mybatis
============================
1. SqlSessionFactoryBean

2. SqlSessionFactory  → <<SqlSession>> → mapper.xml
				(insert, update, delete, select,,,)
※SqlSessionFactory SqlSession 생성관리
※SqlSession : sql실행, 트랜잭션
============================
4. 실습
mybatis
mybatis-spring

   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis</artifactId>
       <version>3.5.6</version>
   </dependency>
   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis-spring</artifactId>
       <version>2.0.6</version>
   </dependency>


5. 설정파일
   ## mapper 설정파일(1)
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
   <mapper namespace="org.mybatis.example.BlogMapper">
   </mapper>
   
   ## mapper 설정파일(2)  
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
   </configuration>

















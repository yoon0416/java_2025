◈java에는 Call by reference 개념이 없다?

Java Call by reference???!!??? 마지막에 정리함

MethodEx005에서 char[] ch = {'a', 'b', 'c'};가 메서드 호출 이후 대문자로 바뀐게 call by reference?? 그거때매 원본값 바뀐 줄 알았는데 
그냥 배열이 참조형 타입의 경우, 참조값(메모리 주소)이 전달되는거라서 그렇게 보인거라고?

※결론 : java에서는 콜 바이 레퍼런스 개념이 없다 그렇게 보인다는거지

※call by value로 주소 값(value)을 전달하여, 두 변수 안에는 같은 주소 값을 같고 있을 뿐 두 변수는 서로 별도로 분리되어 존재합니다 (주소만 같지 다른 역할이므로 별도로 분리 그래서 다른 변수)

▶ 스택에는 메소드에서 사용되는 값(기본 타입 변수나 참조값)이 저장됩니다.
▶ 힙에는 실제 객체(배열, 클래스 인스턴스 등)가 저장됩니다.
＠그래서 주소가 같아 보이지만, 실제로는 각각 스택에 다른 참조값이 복사되어 전달되므로, 서로 다른 변수로 취급


스택과 힙의 차이점 요약

특징	     		스택 (Stack)				힙 (Heap)
───────────────────────────────────────────────────────────────
메모리 할당 방식		자동으로 할당되고 해제됨			동적으로 할당되고, 가비지 컬렉터에 의해 해제됨
메모리 관리 방법		빠르고, 함수가 끝날 때 자동으로 해제		개발자가 직접 메모리를 관리하지 않음 (가비지 컬렉터)
크기 제한			상대적으로 작음				크기 제한이 없음
사용 용도			지역 변수, 함수 호출 등			객체, 배열 등 동적 메모리 할당
메모리 할당 속도		매우 빠름					상대적으로 느림




1. 스택과 힙은 서로 다른 역할을 하는 메모리 공간입니다.

ㆍ스택(Stack): 함수 호출 시 생성되는 지역 변수, 매개변수 등을 저장하는 곳입니다. 함수가 끝나면 자동으로 메모리에서 제거됩니다.
ㆍ힙(Heap): 동적으로 객체나 배열을 저장하는 공간으로, 자바에서는 가비지 컬렉터가 이를 관리합니다.


2. 자바에서 콜 바이 레퍼런스처럼 보이는 이유는 참조형 객체를 메소드로 전달할 때 **참조값(주소)**이 전달되기 때문입니다. 하지만 이 참조값은 스택에 복사되어 전달되고, 그 값이 가리키는 객체는 힙에 저장됩니다.


3. 주소는 같지만:

ㆍ참조값은 스택에 복사되어 메소드 내에서 사용됩니다.
ㆍ객체(예: MyClass 객체)는 힙에 저장됩니다.
ㆍ그래서 두 변수는 서로 다른 스택에 저장되지만 같은 객체를 참조하게 되어 원본 객체의 값이 수정된 것처럼 보입니다.


4. **콜 바이 값(Call by Value)**가 정확한 자바의 방식입니다:

ㆍ기본 타입 변수는 값 자체가 복사되어 전달되고,
ㆍ참조형 객체는 **참조값(메모리 주소)**이 복사되어 전달됩니다.
ㆍ이 참조값을 통해 메소드 내에서 힙에 있는 객체를 수정할 수 있기 때문에 콜 바이 레퍼런스처럼 보이지만 실제로는 콜 바이 값입니다.

※결론:
ㆍ주소값은 같지만, 스택과 힙에서 각각 다른 역할을 하기 때문에 두 변수는 다른 메모리 공간에 저장되고, 그 결과 콜 바이 레퍼런스처럼 보이는 동작이 일어납니다.
ㆍ결국 자바에서 Call by Value 방식으로 참조값이 전달되고, 힙에 있는 객체를 수정하는 효과가 나타나는 것이죠!
ㆍ솔직하게 말하면 자바가 call by reference가 아니고 call by address 라 그러지만 사용하는 입장에서는 둘은 차이가 없다고 보면 된다.

※그럼 콜 바이 레퍼런스처럼 보이는건 뭔디?

▶자바는 Call by Value / Call by Address
이처럼 자바는 오로지 call by value 로서 동작한다.
그래도 원시값을 복사하느냐, 주소값은 복사하느냐에 따라 반환 결과가 달라지기 때문에 세간에서는 이 둘을 구분하기 위해 call by value / call by address 로 명명 지어 구분하기도 한다


-  일단 팩트는  java 에는 call by value만 있습니다. (java 창시자가 그렇다고 합니다..)
-  java : "전달한게 참조주소 값인데, 주소 '값'도 사실 value니까 call by value야"
-  C : "전달한게 주소(address)면 다른 scope에서도 원래 객체에 영향이 가니까, 어느정도 call by reference를 구현한거지. 이건 call by address라고 하자"




@ https://kghworks.tistory.com/85
@ https://inpa.tistory.com/entry/JAVA-%E2%98%95-%EC%9E%90%EB%B0%94%EB%8A%94-Call-by-reference-%EA%B0%9C%EB%85%90%EC%9D%B4-%EC%97%86%EB%8B%A4-%E2%9D%93
@ https://dev-coco.tistory.com/189
@ https://f-lab.kr/insight/understanding-java-call-by-value-and-reference?gad_source=1&gclid=EAIaIQobChMIqZaIkPviiwMVlzB7Bx0g9yjMEAAYASAAEgK5HfD_BwE

자바 언어의 창시자인 제임스 고슬링(James Gosling)이 집필한 “The Java Programming Language”의 일부 내용
-어떤 사람들은 객체가 참조로 전달(by reference)된다고 잘못 말한다. 프로그래밍 언어 설계에서 참조 전달(pass by reference)은 인수가 함수에 전달될 때 그 값의 복사본이 아니라 원래 값의 참조를 전달받음을 의미한다. 만약 함수가 전달받은 매개변수를 변경하면 함수를 호출한 코드도 동일한 메모리 슬롯을 사용하므로 값이 변경되어야 한다.
자바는 객체를 참조로 전달하지 않는다(not pass objects by reference). 대신 객체에 대한 참조를 값으로 전달한다(passes object references by value). 실제 객체를 가리키는 참조의 두 복사본이 동일한 객체를 가리키기 때문에, 한 참조를 통해 만들어진 변경이 다른 참조를 통해서도 보이는 것이다. 
자바에는 명확하게도 값을 전달(pass by value == call by value)하는 방식만 존재하며, 이것이 단순함을 유지할 수 있게 해준다.

-대충 영문 From the authors of Java: "There is exactly one parameter passing mode in Java - pass by value - and that helps keep things simple." The Java Programming Language, 2nd ed. by Ken Arnold and James Gosling, section 2.6.1, page 40, 3rd paragraph.


얕은복사 깊은복사? 뭐 아무튼 저 개념 써도 된다고 함!